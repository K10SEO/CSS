Transition

Transition이란?
:이번 장에서는 transition에 대해서 알아보도록 하겠습니다. transition이란 CSS 속성값이 변할 때, 
값의 변화가 일정 시간에 걸쳐 일어나도록 하는 것을 말합니다.


transition-delay
delay란?
delay가 무슨 뜻인가요? 맞습니다. 한국어로 번역하면 '지연'이라는 뜻입니다. 
말 그대로 transition 이 일어날 때 얼마만큼 기다렸다가 실행할지 결정해주는 속성입니다. 

delay의 값
delay는 transition이 일어나기 전까지 얼마나 기다릴지 지정해 주는 것입니다. 
그렇기 때문에 속성값으로는 시간이 들어가게 됩니다. 초 단위를 나타내는 s나 밀리 초를 나타내는 ms로 나타냅니다.
지정해 주지 않을 시에는 0s을 의미하며 지연 없이 바로 transition이 일어납니다. 
--------------------------------
transition-duration

duration 이란?
duration은 한국어로 '지속'이라는 뜻입니다. transition이 일어나는 지속시간을 설정해 줄 수 있습니다.

duration의 값
transition이 얼마만큼의 시간 동안 변할지 지정해 주어야 합니다. 
그렇기 때문에 delay와 유사하게 시간을 속성값으로 갖습니다. (단위 s, ms)

-------------------------------------
transition-property

property란?
property란 한국어로 '속성'이라는 뜻입니다. 따라서 transition-property란 어떤 속성에  
transition효과를 줄지 설정하는 것을 말합니다. 

property의 값
속성값으로는 all, none, property, initial, inherit이 있습니다. 

all : 기본값으로 모든 속성에 transition효과가 나타나게 하는 것입니다.

none : 속성들이 transition효과를 받지 못하는 것입니다

property : transition효과를 적용하고 싶은 css 속성을 설정하면 지정된 속성에 transition이 나타납니다
(변화하고자 하는 속성을 속성값으로 잘 나타내 주어야한다)

하나 이상의 속성에 적용하고 싶을 때는 쉼표로 나열합니다

initial : 속성의 기본값으로 설정해주는 것입니다. inherit은 부모 요소의 속성값을 상속받습니다.

----------------------------------------
transition-timing-function

timing-function 이란?
transition-timing-function으로 transition의 진행의 움직임을 설정할 수 있습니다
(변화하는 속도에 또 다른 변화를 줄수 있다?)

timing-function의 값
속성값으로는 ease, linear, ease-in, ease-out, ease-in-out, step-start, step-end, 
steps(int, start|end), cubic-bezier(n, n, n, n), initial, inherit이 있습니다. 


대부분의 timing 함수들은 cubic bezier이라는 것을 사용합니다. cubic bezier곡선이란 부드러운 곡선을 
모델링 하기 위해 컴퓨터 그래픽에서 널리 쓰이는 것으로 4개의 컨트롤 포인트를 사용해 transition의 
시작과 끝까지의 효과를 제어합니다.

ease : 기본값으로 transition이 천천히 시작되어 그 다음에는 빨라지고 마지막에는 다시 느려집니다. 
cubic-bezier(0.25, 0.1, 0.25, 0.1)과 같습니다.

linear : transition이 처음부터 끝까지 일정한 속도로 진행됩니다. 
cubic-bezier(0, 0, 1, 1)과 같습니다.

ease-in : 천천히 시작하는 것으로 점점 가속도가 붙는다. 
cubic-bezier(0.42, 0, 1, 1)과 같습니다

ease-out : 빨라지다 마지막에 천천히 끝나는 것이다. 
cubic-bezier(0, 0, 0.58, 1)과 같습니다. 

ease-in-out :천천히 시작해서 천천히 끝나는 것이다 (ease-in, ease-out 이 결합되 있는 상태)
cubic-bezier(0.42, 0, 0.58, 1)과 같습니다. 

cubic-bezier(n, n, n, n)를 사용해 베지어 곡선에 원하는 컨트롤 포인트를 직접 넣어줄 수도 있습니다.
(timing-function 의 값을 내가 직접 설정할 수 있음)

initial은 속성의 기본값으로 적용됩니다. 
inherit은 부모의 영향을 받아 적용됩니다.


transition
transition 속성을 사용해 여태까지 배워본 transition 속성들을 한번에 적용시킬 수 있습니다. 

transition: width 2s linear 1s
#transition-property, transition-duration, transition-timing-function, transition-delay 로 이루어져 있으며 
width 속성을 2초 동안 처음부터 끝까지 일정한 속도로 1초 지연시킨 뒤에 transition 효과가 일어나는 것을 의미합니다.

------------------------------------------------------------------
transform
transform(변형)은 html 요소를 여러 형태로 변형할 때 사용하는 속성으로, 
transition과 함께 사용하면 엄청난 효과를 낼 수 있는 속성입니다.

scale
: 요소의 크기를 변환 시킬 때 사용하는 속성
.box:hover{
      transform: scale(2);
}

#width와 height의 크기를 늘린 것처럼 변형이 되지만 width와 height를 늘렸을 경우엔 
오른쪽 아래가 커지는 반면에 scale은 중심점이 가운데이기 때문에 가운데를 중심으로 커지는 효과를 나타냅니다.

scale(1) : 1 = 100%를 뜻하며 1 이상의 값을 입력해야 변형이 일어나게 됩니다.
scale(2) : 2입력했기 때문에 지금보다 200%인 2배의 크기만큼 커진 모습이 출력됩니다.

#scale의 값에는 2가지 인자를 받을 수 있습니다. (x축, y축)으로 설정 가능하며 한 개의 인자값만 입력할 경우 
x, y동일한 수치를 뜻합니다. 


rotate
회전을 시켜주는 값입니다.
괄호 안에 각도를 입력하면 입력값만큼 회전을 하며, 사용 단위는 deg(degree)를 사용합니다. 
360deg 한 바퀴를 뜻하기에 transform:rotate(1turn)으로도 사용이 가능합니다.
.box:hover{
     transform:rotate(360deg);
}


translate
translate(옮기다) 는 Object를 x,y축 지점으로 이동을 시켜주는 값으로 (x축, y축)을 뜻합니다.
기준점은 가운데이며 값이 증가할 시 x축은 오른쪽으로 y축은 아래 방향으로 이동합니다. 
음수 값을 적용 시 반대 방향으로 이동합니다.
.box:hover{
      transform:translate(100px,100px);
}

skew
skew(외곡하다) 는 상자를 비틀기 또는 외곡을 주어 형태를 변형시키는 속성입니다.
값은 rotate와 동일하게 (40deg)각도로 표시하며 deg(dgree)단위를 사용합니다.
.box:hover{
	transform:skew(40deg);
}


transform-origin
transform-origin속성은 transform되는 Object의 기준점을 변경할 때 사용됩니다.
defult값은 가운데이지만 transform-origin을 사용하여 왼쪽 위로 기준점을 변경하자 
rotate되는 위치가 왼쪽 위부터 시작하는 모션으로 변경이 됩니다. 

left, right, top, bottom, center 문자를 이용해 위치를 설정할 수 있지만 
숫자값을 입력해도 기준점을 설정할 수 있습니다.  transform-origin:0, 0; 앞에 인자는  x축 = 0, 
뒤에 인자는  y축 = 0으로 표시합니다.

transition은 전환, transform은 변형, 이 두 가지를 적절히 잘 활용하면 적은 코드양으로 웹사이트에서 
Awesome한 효과를 낼 수 있습니다.

--------------------------------------------------
translate VS position
앞서 우리는 position 속성을 통해 원하는 좌표로 요소를 움직일 수 있었습니다. 
그렇다면 translate 는 중복되는 기능일까요?? 그렇다면 우리는 언제 position을 사용하고 translate 를 사용해야 할까요??

** 결론 : 정적인 사이트에서 요소의 위치를 단순 배치하는것은 position을 사용해도 괜찮지만, 
애니메이션이나 혹은 동적으로 요소의 위치를 이동해야 하는 경우 transform 속성을 사용하는 것이 성능에 좋습니다. **























