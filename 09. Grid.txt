Grid
부모 컨테이너 요소안에서 내부 자식 요소들의 
위치를 X축과 Y축 방향 모두를 이용해 배치하는 내부디스플레이타입의 하나입니다.

그리드 컨테이너 : 그리드의 가장 바깥 영역

그리드 아이템 : 그리드 컨테이너의 자식 요소들

그리드 트랙 : 그리드의 행(row) 또는 열(column)

그리드 셀 : 그리드의 한 칸 (개념적인 정의)

그리드 라인 : 그리드 셀을 구분하는 선

그리드 넘버 : 그리드 라인의 각 번호

그리드 갭 : 그리드 셀 사이의 간격

그리드 에어리어 : 그리드 셀의 집합


---------------------------------------
grid-container
display:grid; 로 그리드 컨테이너와 아이템을 설정합니다.
.container{
	display:grid;
}

----------------------------------------
grid-template-columns
열방향 그리드 트랙의 사이즈를 설정합니다.

grid-template-columns: 1fr 1fr 1fr

fr : 비율을 의미하는 fraction의 약자입니다.
grid 컨테이너안에서 사용되는 데이터 타입으로, 상황에 따른 유연한 길이를 의미합니다.
(px 픽셀로 단위를 줄 수 도 있지만 고정값이기 때문에 창의 크기에 따라 바뀌지는않는다.)


grid-template-rows
행방향 그리드 트랙의 사이즈를 설정합니다
grid-template-columns 와 같이 가로방향 (행)으로 트랙 사이즈를 설정해줌

------------------------------------------
repeat() 함수 
row 혹은 column 방향으로 grid-track 의 사이즈를 좀 더 간단한 형태로 표현하도록 도와주는 CSS 함수입니다.
함수에 전달하는 첫번째 인자는 반복 횟수(repeat count), 두번째 인자는 반복할 트랙 셋팅 값입니다.

grid-template-columns: repeat(2, 1fr 30px);  # 첫번째 트랙1fr, 두번째30px 이렇게 바꿔가면 2번 반복하겠다 
(트랙의 사이즈가 1fr 과 30px 로 번갈아 가며 반복된다, 사이즈 지정은 지정하는만큼 가능하다)
grid-template-columns: repeat(3, 1fr);         # 열 방향으로 크기는1fr 3번 반복하겠다 (모든 트랙의 사이즈를 동일하게)
(grid-template-row: repeat 도 위와 같다) 

----------------------------------------------
minmax() 함수
최소와 최대 사이의 범위를 설정하는 함수입니다. 최소와 최대값을 의미하는 두 가지 인자를 가집니다.

/* 열방향 그리드 트랙의 최소 넓이를 50px, 최대 넓이를 150px로 합니다. */
  grid-template-columns: repeat(3, minmax(50px, 150px));
# 열방향으로 특랙을 3번 반복하는데 넓이는 50px 미만으로는 안줄이고 150px 이상으로는 안커지겠다

/* 행방향 그리드 트랙의 최소 높이를 120px, 최대 높이를 가용할 수 있는 최대 크기로 합니다. */
  grid-template-rows: repeat(3, minmax(120px, auto));
# 행 방향으로 트랙을 3번 반복하는데 높이는 120px 밑으로는 안줄이고 가능한크게 해주겠다

-------------------------------------------
auto-fill & auto-fit
만약 repeat 함수를 사용할 때, 반복되는 카운트를 고정하지 않고 컨테이너의 넓이에 따라 
가능한 많은 그리드 컬럼을 배치하고 싶다면 사용하는 키워드 값입니다.

auto-fill
grid-template-columns: repeat(auto-fill, minmax(50px, auto));
# 컬럼이 창의 크기에 따라 자동으로 생성되고 없어진다 
(더이상 배치 할 수 있는 그리드 셀이 없다면 없는대로 빈공간을 보여준다)


auto-fit
grid-template-columns: repeat(auto-fit, minmax(50px, auto));
# 컬럼이 창의 크기에 따라 자동으로 생성되고 없어진다
(더이상 배치 할 수 있는 그리드 셀이 없다면 기존에 있던 셀을 넓혀서 컨테이너를 가득채워준다)

auto-fill과 auto-fit 모두 자동으로 필요한 그리드 트랙을 만들어 배치하는 동일한 기능을 하지만 
배치할 수 있는 그리드 셀이 없을 때 차이가 발생합니다. auto-fill과 auto-fit중 어떤 키워드를 사용할지는
기획 의도나 디자인에 따라 선택하시면 됩니다.

--------------------------------------------
gap
셀과 셀사이의 간격을 설정할 때 사용 할 수 있는 속성입니다. 
복잡한 레이아웃 안에서 마진 대신 편리하게 간격을 설정할 수 있습니다. 

row-gap: 10px;       #행간의 여백을 설정해준다

column-gap : 30px  #열간의 여백을 설정해준다

grid-gap : 10px 30px; #축약해서 행과 열의 간격 여백을 설정해준다

gap : 10px 30px;      # 더 축약해서 사용할 수 있다.


gap의 명칭은 다양하게 변화해 왔습니다. 처음에는 grid-column-gap(grid-row-gap) 에서 column-gap(row-gap)으로, 
이제 flex-container 에서도 사용할 수 있기 때문에 축약 속성인 grid-gap 에서 그냥 gap으로 사용할 수 있게 되었습니다.
그렇습니다! flex 에서도 gap 속성을 사용할 수 있습니다!

--------------------------------------------------------
grid-item

그리드 아이템의 영역(grid area) 설정하기
그리드 컨테이너 안에서 그리드 아이템이 차지하는 영역의 범위와 위치를 설정하는 속성입니다. 
범위의 시작과 끝을 설정할 수 있으며, 컬럼과 로우 방향에 대한 축약 속성을 지원합니다.
이때 범위의 기준이 되는 값은 바로 grid-line의 번호입니다.

  grid-column-start : 1;   # 아이템의 열영역을 1부터 시작
  grid-column-end : 3;    #아이템의 열영역을 3에서 끝
  grid-row-start : 1;       # 아이템의 행 영역을 1에서 시작
  grid-row-end : 3;        # 아이템의 행 영역을 3에서 끝

  축약 버전
  grid-column : 1 / 3  # 아이템의 열 영역을 line 1에서 시작해서 3에서 끝난다
  grid-row : 1 / 3      # 아이템의 행 영역을 line 1에서 시작해서 3에서 끝난다
 
더 축약 했을때
/* grid-area의 설정 값은 순서대로 각각 
   grid-row-start, grid-column-start, grid-row-end, grid-column-end를 의미합니다. */
   grid-area : 1/1/3/3 


/* span 키워드를 사용하면 그리드 라인의 번호를 사용하지 않아도 됩니다. */
/* grid-area: 1 / 1 / span 2/ span 2; */
# row,column 시작을 1에서 끝을 2칸만큼 차지하겠다 (grid-area : 1/1/3/3 과 동일한 크기만큼 차지한걸 볼수 있다)
(span을 사용하면 라인 번호를 사용하지 않고 직관적으로 사용가능하다)

익숙하지만 새로운 키워드 span
그리드에서는 span이라는 키워드를 사용할 수 있습니다. 
span의 사전적 의미는 ‘한 뼘’, ‘~을 채우다’ 의 의미를 가지고 있습니다.

-----------------------------------------------------

좀 더 직관적으로 영역을 설정 할 수도 있습니다.
grid-area 속성을 이용하여 영역의 이름을 지어주고, grid-template-areas 속성을 통해 
해당 영역의 범위를 시각적으로 표현할 수 있습니다.

body{
  display:grid;
  grid-template-columns: 1fr 2fr; # 1fr 크기와 2fr 크기의 2가지 컬럼을 생성
  grid-template-areas: # 지어준 이름으로 셀의 위치를 지정
    'header header'  # 같은 셀이 설정이 되면 하나의 셀로 병합된다
    'aside main'       # aside 와 main 으로 영역이 나뉘어져 있다
    'footer footer'    # 헤더와 마찬가지로 푸터로만 이루어진 셀로 되있다
    /*컬럼이 2개여서 '헤더 헤더' 사용됨 컬럼이 3개면 '헤더 헤더 헤더' 이런식으로 셀의 위치를 지정 해준다*/
}

header{      # 헤드 타입선택자
  grid-area:header;   # grid-area 로 이름을 붙여주어 그리드 셀로 사용가능하게해줌
  background-color: pink;
}
main{
  grid-area:main;
  background-color: royalblue;
}
aside{
  grid-area:aside;
  background-color: lightgreen;
}
footer{
  grid-area:footer;
  background-color: aquamarine;
}

-------------------------------------------------
그리드 아이템의 Z축 설정하기
우리가 앞서 position을 공부할 때 살펴봤던 z-index 속성을 grid 안에서도 사용 할 수 있습니다.
grid 안에서는 굳이 position 속성을 사용하지 않더라도 z-index를 사용하여 화면에 보여지는 
우선순위를 설정할 수 있습니다.

body{
  display:grid;
  grid-template-columns: 1fr 2fr;
  grid-template-areas:
    'header header'
    'aside main'
    'footer footer';
}

header{
  grid-area:header;
  background-color: pink;
}
main{
  grid-area:main;
  background-color: royalblue;
}
aside{
  grid-area:aside;
  background-color: lightgreen;
  transition:0.3s;
  transform-origin:0 0;
}

/* aside 에 마우스를 호버하면 10% 크기를 키웁니다. */
  aside:hover{
  transform:scale(1.1);
}

footer{
/* aside 의 크기가 커져도 footer를 가리지 않게 합니다. */
  z-index:1;
  grid-area:footer;
  background-color: aquamarine;
}













