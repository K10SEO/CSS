CSS Selector 심화

태그[속성이름]
속성이름 에 해당되는 속성을 가진 태그를 모두 선택합니다.
// a태그 안에 href속성을 가진 태그를 선택
a[href] {
	font-size: 10px;
}

태그[속성이름="속성값"]
`속성이름` 의 속성값이 `변수`와 일치하는 태그를 선택합니다.
// a태그 안에 href속성을 가지며 속성값이 http://www.paullab.co.kr 를 가진 태그를 선택
a[href="http://www.paullab.co.kr"] {
    font-size: 32px;
}

태그[속성이름~="변수"]
속성이름 의 속성값 중에 변수 를 하나의 완전한 단어로 포함하는 태그를 선택합니다.
// a태그 안에 class속성을 가지며 속성값이 wenive를 가진 태그를 선택
(wenive화이팅! 같이 wenive와 화이팅이 붙어 있으면 선택되지않음) 
a[class~="weniv"] {
    color: black;
}

태그[속성^="변수"]
속성 의 속성값이 변수 로 시작하는 태그를 선택합니다.
// a태그 안에 있는 href속성의 속성값이 http로 시작하는 태그를 선택
a[href^="http"] {
    color: black;
}

태그[속성$="변수"]
속성 의 속성값이 변수 로 끝나는 요소를 선택합니다.
// a태그 안에 있는 href속성의 속성값이 kr 또는 .pdf 로 끝나는 태그를 선택
a[href$="kr"]{
    color: black;
}

a[href$=".pdf"]{
    color: black;
}

태그[속성*="변수"]
속성 의 속성값이 변수 를 포함하는 태그를 선택합니다.
// a태그 안에 있는 href속성에 속성값이 weniv 가 포함되있는 태그를 선택
a[href*="weniv"] {
	  color: black;
}

태그[속성~="변수"] 와 태그[속성*="변수"] 의 차이는 무엇인가요?

~= 는 단어를 기준으로 *= 는 문자열을 기준으로 판단을 하게 됩니다. 
예를 들어서 위와 같은 상황에서 paullabs 를 어떻게 인식할까요?
~= 은 단어를 기준으로 paullab 와 paullabs 를 다르다고 인식하고 선택을 못하게 되고 
*= 은 문자열을 기준으로 paullabs  안에 paullab 가 포함되기 때문에 선택을 합니다.

태그[속성|="변수"]
속성 의 속성값이 변수 이거나 변수 로 시작하면서 뒤에 바로 ‘-’(하이픈) 기호가 있는 태그를 선택합니다.
// 속성 의 속성값이 http 이거나 http 로 시작하면서 뒤에 바로 ‘-’(하이픈) 기호가 있는 태그를 선택
a[href|="http"]{
    color: black;
}

-------------------------------------
가상 클래스 선택자
실재로 html에 존재하지 않는 클래스지만 마치 클래스가 존재하는것 처럼 
작동한다고 하여 가상 클래스 선택자로 부릅니다.
1. .foo:first-child : class="foo"인 엘리먼트 중 첫번째 자식인 엘리먼트를 선택합니다.
2. .foo:last-child : class="foo"인 엘리먼트 중 마지막 자식인 엘리먼트를 선택합니다.
3. .foo:nth-child(3) : class="foo"인 엘리먼트 중 3번째 자식인 엘리먼트를 선택합니다.
    
    1) .foo:nth-child(odd) : class="foo"인 엘리먼트 중 홀수 번째 자식인 엘리먼트를 모두 선택합니다.
    
    2) .foo:nth-child(even) : class="foo"인 엘리먼트 중 짝수 번째 자식인 엘리먼트를 모두 선택합니다.
    
    3) .foo:nth-child(n) : class="foo"인 엘리먼트 중 n번째 자식인 엘리먼트를 모두 선택합니다. 
        n은 0부터 1씩 증가합니다. (0, 1, 2, 3, 4, 5 … )
    
    4) .foo:nth-child(3n) : class="foo"인 엘리먼트 중 3번째 자식마다 모두 선택합니다. 
        (3x0, 3x1, 3x2, 3x3, 3x4, 3x5 … )
    
    5) .foo:nth-child(3n+1) : class="foo"인 엘리먼트 중 3n+1번째 자식인 엘리먼트를 모두 선택합니다. 
        (3x0+1, 3x1+1, 3x2+1, 3x3+1, 3x4+1, 3x5+1 … )
    
4. a:visited : 방문한 적이 있는 링크를 선택합니다.


상호 작용을 위한 가상클래스

:hover
사용자가 마우스를 요소 위에 올렸을 때 적용됩니다. 스마트폰이나 패드 류의 터치스크린 기기에서는 
사용자의 손가락이 호버되는 시점을 알 수 없기 때문에 모바일 기기가 많아지면서 점점 사용 빈도가 
줄어드는 기능입니다. 
button:hover{
	background-color: yellow;
}

:active
사용자가 요소를 실행할 때(버튼을 누르거나 링크를 클릭할 때) 적용됩니다
// 클릭 하는 순간! 색을 red로 바꿔줌
a:active{
	color: red;
}

:focus 
요소에 포커스가 있을 때 적용됩니다. 클릭할 수 있는 요소나 폼컨트롤(input, select 등등)과 
같이 상호작용 할 수 있는 모든 요소에는 포커스가 가능합니다.
// tap 이나 클릭으로 포커싱된것을 보여준다! (보더라인같은게 생김)
input:focus{
  border: 5px solid royalblue;
}

:checked
선택한 상태의 라디오, 체크박스, 옵션 요소를 나타냅니다.
```html
<input id="check" type="checkbox">
<label for="check">오늘 아침은 삼겹살입니다.</label>
```
```css
input:checked+label{               //input 요소에 checked가 되었을때 label을 선택해라!
  background-color: lightgreen;
}
```
----------------------------------------------------
가상 요소 선택자

::before
요소의 맨 첫번째 자식으로 HTML코드에 존재하지 않는 가상요소를 하나 생성합니다
// 선택된 요소의 자식으로 맨앞에 html에는 없는 hello world라는 가상요소가 하나 생김!
/* p 태그의 첫번째 자식으로 텍스트를 생성합니다. */
p::before {
	content:'hello world!';
}

::after
요소의 맨 마지막 자식으로 HTML코드에 존재하지 않는 가상요소를 하나 생성합니다. 
//// 선택된 요소의 자식으로 맨뒤에 html에는 없는 hello world라는 가상요소가 하나 생김!
/* p 태그의 첫번째 자식으로 텍스트를 생성합니다. */
section::after{
	display:block;
	content:'hello world!';
}

::selection
사용자가 선택하여 하이라이트 된 상태의 텍스트를 선택합니다.(마우스가 드래그했을때 같은 상태들!)
/* 선택된 텍스트의 기본 스타일입니다. */
::selection {
  color: gold;
  background-color: red;
}

/* 선택자와 결합하여 사용된 선택된 텍스트의 스타일입니다. */
(strong은 배경이 파랗고 글자가 하얗게 나옴)
strong::selection {
  color: white;
  background-color: blue;
}


가상 클래스 선택자와 가상 요소 선택자는 햇갈리는 부분이니 여기서 정확히 정리해가시는 것이 좋습니다.

가장 큰 차이는 아래와 같습니다.
- 가상 요소 선택자는 콜론이 2개(가상 클래스 선택자는 1개). 간혹 가상요소 선택자에 
콜론이 1개만 보이는 경우가 있습니다. 이것은 레거시 브라우저 호환을 위한 선택입니다. 
(Internet Explorer 8이하) ( 가상요소 선택자는 1개도 되긴 하지만 2개가 맞는거임 2개를 써야됩니다)
- 가상 요소 선택자는 마크업 없는 요소를 삽입(가상 클래스 선택자는 클래스 없는 요소에 클래스 삽입)









































